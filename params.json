{"name":"TLC","body":"# TLC - The Tiny Lua Cocoa Bridge\r\n\r\nTLC is a very compact and minimal Objective-C bridge for LuaJIT.\r\nWritten by Fjõlnir Ásgeirsson <fjolnir at asgeirsson dot is>\r\n\r\n## Simple Example\r\n```lua\r\nlocal objc = require(\"objc\")\r\nobjc.loadFramework(\"AppKit\")\r\npool = objc.NSAutoreleasePool:new()\r\nobjc.NSSpeechSynthesizer:new():startSpeakingString(objc.NSStr(\"Hello From Lua!\"))\r\nos.execute(\"sleep \"..2)\r\n```\r\n\r\n## Mini-Documentation\r\n\r\nTLC supports the following:\r\n\r\n * Loading frameworks\r\n * Accessing Objective-C objects\r\n * Creating Objective-C classes\r\n * Calling methods on said objects\r\n * Creating blocks from Lua functions\r\n * Converting the basic lua types to objects (Explicitly)\r\n * Loading BridgeSupport files\r\n\r\nTLC Does not *yet* support the following:\r\n\r\n * Calling methods that take a variable number of arguments\r\n * Defining variadic blocks, methods or callbacks, or ones that take pass-by-value(non-pointer) structs or unions. (A limitation of LuaJIT FFI)\r\n\r\n### Loading TLC\r\n```lua\r\nlocal objc = require(\"objc\")\r\n```\r\n### Loading frameworks\r\n```lua\r\nobjc.loadFramework(\"Foundation\")\r\n\r\n-- You can also use BridgeSupport\r\n-- It is slower, but you get access to all C types, functions & constants automatically\r\nlocal bs = require(\"objc.BridgeSupport\")\r\nbs.loadFramework(\"Foundation\")\r\n-- You can then access constants using bs\r\nmyView.center = bs.CGPointZero\r\n```\r\n\r\n### Accessing Objective-C objects\r\n```lua\r\nlocal NSString = objc.NSString\r\n```\r\n\r\n### Calling Methods\r\n```lua\r\nlocal myStr = NSString:stringWithUTF8String(\"I am an NSString.\")\r\n\r\n-- Calling selectors with multiple arguments requires replacing the colons with underscores\r\n-- Except the ones at the end, they are optional.\r\n-- Example selector:with:multiple:parameters: => selector_with_multiple_parameters()\r\n--         selectorWithAnonymousParams:::: => selectorWithAnonymousParams()\r\nlocal anObject = MyObject:selector_with_multiple_parameters(arg1, arg2, arg3, arg4)\r\n```\r\n### Creating Blocks from Lua Functions\r\n```lua\r\n-- To create a block you call createBlock with it's type encoding (Default being void return and no argument)\r\n-- To learn about type encodings read https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html\r\n-- A block returning an integer and taking one object and one double as arguments\r\nlocal block = objc.createBlock(function(object, double)\r\n\tprint(\"I was passed these arguments: \", object, double)\r\n\treturn 123\r\nend, \"i@d\")\r\n```\r\n\r\n### Converting the Basic Lua Types to Objects\r\n```lua\r\n-- If you know the type of the variable you want to convert you should use these functions\r\nlocal string     = NSStr(\"foobar\")\r\nlocal number     = NSNum(123)\r\nlocal array      = NSArr({\"a\",\"b\",\"c\"})\r\nlocal dictionary = NSDic({ a=1, b=2, c=3 })\r\n-- If not,\r\n-- The Obj() function takes an arbitrary value and determines the correct class to convert it to\r\nlocal object = Obj(anyVariable)\r\n```\r\n\r\n### (Dirty Secret Trick)\r\n```lua\r\n-- If you don't want to type 'objc.' before using a class you can set the global namespace to use it as a fallback\r\nsetmetatable(_G, {__index=objc})\r\n-- And then you can simply write the class names without the 'objc.' prefix\r\nobj = CoolClass:doThings()\r\n```\r\n","tagline":"The Tiny Lua Cocoa Bridge","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}